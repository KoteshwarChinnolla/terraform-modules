variable "account_id" {
  type        = string
  description = "AWS Account ID"
}

variable "oidc_provider" {
  type        = string
  description = "OIDC provider URL without https://"
}

variable "namespace" {
  type        = string
  description = "Kubernetes namespace for the service account"
}

variable "sa_name" {
  type        = string
  description = "Service account name"
}

variable "role_name" {
  type        = string
  description = "IAM Role name to be created"
}

variable "statements" {
  description = "A map of IAM policy statements"
  type = list(object({
    actions   = list(string)
    resources = list(string)
    effect    = string
  }))
  default = []
}

variable "policy_name" {
  type        = string
  description = "IAM Policy name to create/attach"
  default     = ""
}

locals {
  trust_relationship = {
    Version   = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Federated = "arn:aws:iam::${var.account_id}:oidc-provider/${var.oidc_provider}"
        }
        Action    = "sts:AssumeRoleWithWebIdentity"
        Condition = {
          StringEquals = {
            "${var.oidc_provider}:aud" = "sts.amazonaws.com"
            "${var.oidc_provider}:sub" = "system:serviceaccount:${var.namespace}:${var.sa_name}"
          }
        }
      }
    ]
  }
}

# IAM Role (always created)
resource "aws_iam_role" "this" {
  name               = var.role_name
  assume_role_policy = jsonencode(local.trust_relationship)
}

# Only create IAM policy if statements are provided
data "aws_iam_policy_document" "inline" {
  count = length(var.statements) > 0 ? 1 : 0

  dynamic "statement" {
    for_each = var.statements
    content {
      actions   = statement.value.actions
      resources = statement.value.resources
      effect    = statement.value.effect
    }
  }
}

resource "aws_iam_policy" "policy" {
  count       = length(var.statements) > 0 && var.policy_name != "" ? 1 : 0
  name        = var.policy_name
  description = "IAM policy generated by Terraform"
  policy      = data.aws_iam_policy_document.inline[0].json
}

resource "aws_iam_role_policy_attachment" "attach" {
  count      = length(aws_iam_policy.policy) > 0 ? 1 : 0
  role       = aws_iam_role.this.name
  policy_arn = aws_iam_policy.policy[0].arn
}

output "role_name" {
  value = aws_iam_role.this.name
}

output "role_arn" {
  value = aws_iam_role.this.arn
}

output "policy_arn" {
  value       = length(aws_iam_policy.policy) > 0 ? aws_iam_policy.policy[0].arn : null
  description = "ARN of the IAM policy if created, else null"
}

